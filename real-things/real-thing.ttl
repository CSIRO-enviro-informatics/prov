# baseURI: http://realprov.org/ns/real-thing
# imports: http://purl.org/dc/terms/
# imports: http://www.w3.org/2006/time
# imports: http://www.w3.org/ns/prov
# prefix: real

@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix real: <http://realprov.org/ns/real-thing#> .
@prefix sampling: <http://www.w3.org/ns/sosa/sampling/> .
@prefix time: <http://www.w3.org/2006/time#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://realprov.org/ns/real-thing>
  rdf:type owl:Ontology ;
  dcterms:contributor <http://people.csiro.au/Nicholas-Car> ;
  dcterms:created "2018-01-03"^^xsd:date ;
  dcterms:creator <http://registry.it.csiro.au/sandbox/csiro/person/Simon-Cox> ;
  dcterms:license <http://registry.it.csiro.au/licence/csiro-open-source-software-v1.0> ;
  dcterms:modified "2018-01-09" ;
  rdfs:comment """An ontology for real or material things, based on the PROV ontology.  
The focus is particularly on supporting chain-of-custody applications. 

Status: experimental""" ;
  rdfs:label "Real things ontology" ;
  owl:imports dcterms: ;
  owl:imports <http://www.w3.org/2006/time> ;
  owl:imports <http://www.w3.org/ns/prov> ;
.
real:Custodian
  rdf:type owl:Class ;
  rdfs:comment "Specialization of Agent required to support cardinality constraint that a Custody Interval can be associaed with only one Custodian" ;
  rdfs:label "Agent who has custody of an Entity" ;
  rdfs:subClassOf prov:Agent ;
.
real:CustodyInterval
  rdf:type owl:Class ;
  rdfs:comment "CustodyInterval is modeled as a subclass of prov:Activity because of its association with a prov:Agent, and used a prov:Entity" ;
  rdfs:comment "CustodyInterval is modeled as a subclass of time:ProperInterval because of its ordering relations with other CustodyIntervals" ;
  rdfs:comment """If transfer of custody is not instantaneous, there is joint custody during the overlapping transfer interval.
This might be expressed as guarded constraints as follows:

((time:hasBeginning exactly 1 real:CustodyTransfer) and (time:intervalMetBy exactly 1 real:CustodyInterval))
 xor
((time:intervalStartedBy exactly 1 real:CustodyTransfer)  and (time:intervalOverlappedBy exactly 1 real:CustodyInterval))

and

((time:hasEnd exactly 1 real:CustodyTransfer) and (time:intervalMeets exactly 1 real:CustodyInterval))
 xor
((time:intervalFinishedBy exactly 1 real:CustodyTransfer) and (time:intervalOverlaps exactly 1 real:CustodyInterval))

but this only applies if all the CustodyTransfer and CustodyInterval individuals relate to the same Entity, so these constraints probably cannot be expressed as OWL axioms""" ;
  rdfs:label "An interval during which a specified entity is in custody of a nominated agent" ;
  rdfs:subClassOf time:ProperInterval ;
  rdfs:subClassOf prov:Activity ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:cardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty real:hasCustodyOf ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass real:Custodian ;
      owl:onProperty prov:wasAssociatedWith ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
real:CustodyTransfer
  rdf:type owl:Class ;
  rdfs:comment """A transfer of custody is modeled as a subclass of time:TemporalEntity.
It may be considered to be instantaneous (i.e. a time:Instant) in which case it is the time:hasEnd of one custody interval and time:hasBeginning of another.
Else a transfer may take a finite duration (i.e. a time:Interval) in which case the Entity is in joint custody during the transfer interval.

These conditions might be expressed as guarded constraints as follows:

(rdf:type value time:Instant)
xor
((rdf:type value time:ProperInterval) and (time:intervalFinishes exactly 1 real:CustodyInterval) and (time:intervalStarts exactly 1 real:CustodyInterval))

but this only applies if all the CustodyTransfer and CustodyInterval individuals relate to the same Entity, so these constraints probably cannot be expressed as OWL axioms""" ;
  rdfs:label "Transfer of custody from one agent to another" ;
  rdfs:subClassOf time:TemporalEntity ;
  rdfs:subClassOf prov:Activity ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:cardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty real:newCustodian ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:cardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty real:oldCustodian ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:cardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty real:transfersCustodyOf ;
    ] ;
.
real:Entity
  rdf:type owl:Class ;
  rdfs:comment """A real thing either has a (current) location, else has been replaced by other thing(s) through some kind of transformation. 
Destruction is a special case where it has been transformed into nothing. A special individual

   real:nothing a prov:Entity .

is provided to support the last case.""" ;
  rdfs:label "Physical thing or material entity" ;
  rdfs:subClassOf prov:Entity ;
  rdfs:subClassOf [
      rdf:type owl:Class ;
      owl:disjointUnionOf (
          [
            rdf:type owl:Restriction ;
            owl:minCardinality "1"^^xsd:nonNegativeInteger ;
            owl:onProperty dcterms:isReplacedBy ;
          ]
          [
            rdf:type owl:Restriction ;
            owl:cardinality "1"^^xsd:nonNegativeInteger ;
            owl:onProperty prov:atLocation ;
          ]
        ) ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty real:hasMass ;
    ] ;
.
real:SimpleMeasure
  rdf:type owl:Class ;
  rdfs:comment "Simple implementation of a scaled number as an (amount, unit) pair" ;
  rdfs:label "Simple measure (quantity)" ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:cardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty real:uom ;
    ] ;
  owl:equivalentClass [
      rdf:type owl:Restriction ;
      owl:cardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty real:amount ;
    ] ;
.
real:amount
  rdf:type owl:DatatypeProperty ;
  rdfs:label "numeric amount value" ;
  rdfs:range xsd:decimal ;
.
real:custodianRole
  rdf:type prov:Role ;
  rdfs:label "Custodian role" ;
.
real:entityInCustody
  rdf:type prov:Role ;
  rdfs:label "Entity in custody" ;
.
real:hasCustodian
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This specialization allows us to bind the custodian role to the association explicitly, instead of relying on adding an additional rdf:type to the individual agent. This is preferred since the role only applies to this associations involving the specified agent." ;
  rdfs:domain real:CustodyInterval ;
  rdfs:label "Custodian of the entity during the interval" ;
  rdfs:range real:Custodian ;
  rdfs:subPropertyOf prov:wasAssociatedWith ;
  owl:propertyChainAxiom (
      [
        rdf:type owl:ObjectProperty ;
        rdfs:range [
            rdf:type owl:Class ;
            rdfs:subClassOf prov:Association ;
            rdfs:subClassOf [
                rdf:type owl:Restriction ;
                owl:hasValue real:custodianRole ;
                owl:onProperty prov:hadRole ;
              ] ;
          ] ;
        rdfs:subPropertyOf prov:qualifiedAssociation ;
      ]
      prov:agent
    ) ;
.
real:hasCustodyOf
  rdf:type owl:ObjectProperty ;
  rdfs:comment "An explicit property to indicate the custody entity is required because the object of a generic prov:used predicate might play other roles in the CustodyInterval" ;
  rdfs:domain real:CustodyInterval ;
  rdfs:range prov:Entity ;
  rdfs:subPropertyOf prov:used ;
  owl:propertyChainAxiom (
      [
        rdf:type owl:ObjectProperty ;
        rdfs:range [
            rdf:type owl:Class ;
            rdfs:subClassOf prov:Usage ;
            rdfs:subClassOf [
                rdf:type owl:Restriction ;
                owl:hasValue real:entityInCustody ;
                owl:onProperty prov:hadRole ;
              ] ;
          ] ;
        rdfs:subPropertyOf prov:qualifiedUsage ;
      ]
      prov:entity
    ) ;
.
real:hasMass
  rdf:type owl:ObjectProperty ;
  rdfs:label "Mass of thing" ;
.
real:inCustodyOf
  rdf:type owl:ObjectProperty ;
  owl:inverseOf real:hasCustodyOf ;
.
real:newCustodian
  rdf:type owl:ObjectProperty ;
  rdfs:domain real:CustodyTransfer ;
  rdfs:label "Custodian of the entity after the transfer" ;
  rdfs:range real:Custodian ;
  rdfs:subPropertyOf prov:wasAssociatedWith ;
  owl:propertyChainAxiom (
      [
        rdf:type owl:ObjectProperty ;
        rdfs:range [
            rdf:type owl:Class ;
            rdfs:subClassOf prov:Association ;
            rdfs:subClassOf [
                rdf:type owl:Restriction ;
                owl:hasValue real:newCustodianRole ;
                owl:onProperty prov:hadRole ;
              ] ;
          ] ;
        rdfs:subPropertyOf prov:qualifiedAssociation ;
      ]
      prov:agent
    ) ;
.
real:newCustodianRole
  rdf:type prov:Role ;
  rdfs:label "New (subsequent) custodian role" ;
.
real:nothing
  rdf:type prov:Entity ;
  rdfs:comment """Individual corresponding to nothing. 
Provided for use in relationships when a real thing does not physically exist.""" ;
  rdfs:label "Nothing" ;
.
real:nowhere
  rdf:type prov:Location ;
  rdfs:comment """Individual corresponding to nowhere. 
Provided for use in relationships to indicate when a real thing has no physical location.""" ;
  rdfs:label "Nowhere" ;
.
real:oldCustodian
  rdf:type owl:ObjectProperty ;
  rdfs:domain real:CustodyTransfer ;
  rdfs:label "Custodian of the entity before the transfer" ;
  rdfs:range real:Custodian ;
  rdfs:subPropertyOf prov:wasAssociatedWith ;
  owl:propertyChainAxiom (
      [
        rdf:type owl:ObjectProperty ;
        rdfs:range [
            rdf:type owl:Class ;
            rdfs:subClassOf prov:Association ;
            rdfs:subClassOf [
                rdf:type owl:Restriction ;
                owl:hasValue real:oldCustodianRole ;
                owl:onProperty prov:hadRole ;
              ] ;
          ] ;
        rdfs:subPropertyOf prov:qualifiedAssociation ;
      ]
      prov:agent
    ) ;
.
real:oldCustodianRole
  rdf:type prov:Role ;
  rdfs:label "Old (prior) custodian role" ;
.
real:transfersCustodyOf
  rdf:type owl:ObjectProperty ;
  rdfs:comment "Link to the entity whose custody is being transferred" ;
  rdfs:domain real:CustodyTransfer ;
  rdfs:range prov:Entity ;
  rdfs:subPropertyOf prov:used ;
  owl:propertyChainAxiom (
      [
        rdf:type owl:ObjectProperty ;
        rdfs:range [
            rdf:type owl:Class ;
            rdfs:subClassOf prov:Usage ;
            rdfs:subClassOf [
                rdf:type owl:Restriction ;
                owl:hasValue real:entityInCustody ;
                owl:onProperty prov:hadRole ;
              ] ;
          ] ;
        rdfs:subPropertyOf prov:qualifiedUsage ;
      ]
      prov:entity
    ) ;
.
real:uom
  rdf:type owl:ObjectProperty ;
  rdfs:comment "Unit of measure or scale" ;
.
